// Code generated by MockGen. DO NOT EDIT.
// Source: product_grpc.go
//
// Generated by this command:
//
//	mockgen -source=product_grpc.go -destination=./mock/mock_product_grpc.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	params "github.com/elangreza/e-commerce/product/internal/params"
	gomock "go.uber.org/mock/gomock"
)

// MockproductService is a mock of productService interface.
type MockproductService struct {
	ctrl     *gomock.Controller
	recorder *MockproductServiceMockRecorder
	isgomock struct{}
}

// MockproductServiceMockRecorder is the mock recorder for MockproductService.
type MockproductServiceMockRecorder struct {
	mock *MockproductService
}

// NewMockproductService creates a new mock instance.
func NewMockproductService(ctrl *gomock.Controller) *MockproductService {
	mock := &MockproductService{ctrl: ctrl}
	mock.recorder = &MockproductServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductService) EXPECT() *MockproductServiceMockRecorder {
	return m.recorder
}

// GetProduct mocks base method.
func (m *MockproductService) GetProduct(ctx context.Context, req params.GetProductRequest) (*params.GetProductResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProduct", ctx, req)
	ret0, _ := ret[0].(*params.GetProductResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProduct indicates an expected call of GetProduct.
func (mr *MockproductServiceMockRecorder) GetProduct(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProduct", reflect.TypeOf((*MockproductService)(nil).GetProduct), ctx, req)
}

// ListProducts mocks base method.
func (m *MockproductService) ListProducts(ctx context.Context, req params.PaginationParams) (*params.ListProductsResponse, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, req)
	ret0, _ := ret[0].(*params.ListProductsResponse)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockproductServiceMockRecorder) ListProducts(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockproductService)(nil).ListProducts), ctx, req)
}
