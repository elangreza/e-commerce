// Code generated by MockGen. DO NOT EDIT.
// Source: product_service.go
//
// Generated by this command:
//
//	mockgen -source=product_service.go -destination=./mock/mock_product_service.go -package=mock
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entity "github.com/elangreza/e-commerce/product/internal/entity"
	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockproductRepo is a mock of productRepo interface.
type MockproductRepo struct {
	ctrl     *gomock.Controller
	recorder *MockproductRepoMockRecorder
	isgomock struct{}
}

// MockproductRepoMockRecorder is the mock recorder for MockproductRepo.
type MockproductRepoMockRecorder struct {
	mock *MockproductRepo
}

// NewMockproductRepo creates a new mock instance.
func NewMockproductRepo(ctrl *gomock.Controller) *MockproductRepo {
	mock := &MockproductRepo{ctrl: ctrl}
	mock.recorder = &MockproductRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockproductRepo) EXPECT() *MockproductRepoMockRecorder {
	return m.recorder
}

// GetProductByID mocks base method.
func (m *MockproductRepo) GetProductByID(ctx context.Context, ID uuid.UUID) (*entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetProductByID", ctx, ID)
	ret0, _ := ret[0].(*entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetProductByID indicates an expected call of GetProductByID.
func (mr *MockproductRepoMockRecorder) GetProductByID(ctx, ID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetProductByID", reflect.TypeOf((*MockproductRepo)(nil).GetProductByID), ctx, ID)
}

// ListProducts mocks base method.
func (m *MockproductRepo) ListProducts(ctx context.Context, req entity.ListProductRequest) ([]entity.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListProducts", ctx, req)
	ret0, _ := ret[0].([]entity.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListProducts indicates an expected call of ListProducts.
func (mr *MockproductRepoMockRecorder) ListProducts(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListProducts", reflect.TypeOf((*MockproductRepo)(nil).ListProducts), ctx, req)
}

// TotalProducts mocks base method.
func (m *MockproductRepo) TotalProducts(ctx context.Context, req entity.ListProductRequest) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TotalProducts", ctx, req)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TotalProducts indicates an expected call of TotalProducts.
func (mr *MockproductRepoMockRecorder) TotalProducts(ctx, req any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TotalProducts", reflect.TypeOf((*MockproductRepo)(nil).TotalProducts), ctx, req)
}
